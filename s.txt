Line: 0 Column: 0 Type: const Value: const
Line: 0 Column: 6 Type: IDENT Value: magic
Line: 0 Column: 11 Type: COLON Value: :
Line: 0 Column: 13 Type: int Value: int
Line: 0 Column: 17 Type: ASSIGN Value: =
Line: 0 Column: 19 Type: UNIT_LITERAL Value: 1000000009
Line: 0 Column: 29 Type: SEMICOLON Value: ;
Line: 1 Column: 0 Type: const Value: const
Line: 1 Column: 6 Type: IDENT Value: magic2
Line: 1 Column: 12 Type: COLON Value: :
Line: 1 Column: 14 Type: int Value: int
Line: 1 Column: 18 Type: ASSIGN Value: =
Line: 1 Column: 20 Type: UNIT_LITERAL Value: 1919839
Line: 1 Column: 27 Type: SEMICOLON Value: ;
Line: 2 Column: 0 Type: const Value: const
Line: 2 Column: 6 Type: IDENT Value: min_temp
Line: 2 Column: 14 Type: COLON Value: :
Line: 2 Column: 16 Type: double Value: double
Line: 2 Column: 23 Type: ASSIGN Value: =
Line: 2 Column: 25 Type: DOUBLE_LITERAL Value: 0.0010000000000000002
Line: 2 Column: 30 Type: SEMICOLON Value: ;
Line: 4 Column: 0 Type: const Value: const
Line: 4 Column: 6 Type: IDENT Value: f_low
Line: 4 Column: 11 Type: COLON Value: :
Line: 4 Column: 13 Type: double Value: double
Line: 4 Column: 20 Type: ASSIGN Value: =
Line: 4 Column: 22 Type: MINUS Value: -
Line: 4 Column: 23 Type: DOUBLE_LITERAL Value: 2.0
Line: 4 Column: 26 Type: SEMICOLON Value: ;
Line: 5 Column: 0 Type: const Value: const
Line: 5 Column: 6 Type: IDENT Value: f_high
Line: 5 Column: 12 Type: COLON Value: :
Line: 5 Column: 14 Type: double Value: double
Line: 5 Column: 21 Type: ASSIGN Value: =
Line: 5 Column: 23 Type: DOUBLE_LITERAL Value: 2.0
Line: 5 Column: 26 Type: SEMICOLON Value: ;
Line: 7 Column: 0 Type: let Value: let
Line: 7 Column: 4 Type: IDENT Value: state
Line: 7 Column: 9 Type: COLON Value: :
Line: 7 Column: 11 Type: int Value: int
Line: 7 Column: 15 Type: ASSIGN Value: =
Line: 7 Column: 17 Type: UNIT_LITERAL Value: 19260817
Line: 7 Column: 25 Type: SEMICOLON Value: ;
Line: 9 Column: 0 Type: let Value: let
Line: 9 Column: 4 Type: IDENT Value: x_old
Line: 9 Column: 9 Type: COLON Value: :
Line: 9 Column: 11 Type: double Value: double
Line: 9 Column: 17 Type: SEMICOLON Value: ;
Line: 10 Column: 0 Type: let Value: let
Line: 10 Column: 4 Type: IDENT Value: x_new
Line: 10 Column: 9 Type: COLON Value: :
Line: 10 Column: 11 Type: double Value: double
Line: 10 Column: 17 Type: SEMICOLON Value: ;
Line: 11 Column: 0 Type: let Value: let
Line: 11 Column: 4 Type: IDENT Value: s_old
Line: 11 Column: 9 Type: COLON Value: :
Line: 11 Column: 11 Type: double Value: double
Line: 11 Column: 18 Type: ASSIGN Value: =
Line: 11 Column: 20 Type: DOUBLE_LITERAL Value: 1926.0817
Line: 11 Column: 29 Type: SEMICOLON Value: ;
Line: 12 Column: 0 Type: let Value: let
Line: 12 Column: 4 Type: IDENT Value: s_new
Line: 12 Column: 9 Type: COLON Value: :
Line: 12 Column: 11 Type: double Value: double
Line: 12 Column: 17 Type: SEMICOLON Value: ;
Line: 14 Column: 0 Type: let Value: let
Line: 14 Column: 4 Type: IDENT Value: temp
Line: 14 Column: 8 Type: COLON Value: :
Line: 14 Column: 10 Type: double Value: double
Line: 14 Column: 17 Type: ASSIGN Value: =
Line: 14 Column: 19 Type: DOUBLE_LITERAL Value: 10000.0
Line: 14 Column: 26 Type: SEMICOLON Value: ;
Line: 16 Column: 0 Type: fn Value: fn
Line: 16 Column: 3 Type: IDENT Value: f
Line: 16 Column: 4 Type: L_PAREN Value: (
Line: 16 Column: 5 Type: IDENT Value: x
Line: 16 Column: 6 Type: COLON Value: :
Line: 16 Column: 8 Type: double Value: double
Line: 16 Column: 14 Type: R_PAREN Value: )
Line: 16 Column: 16 Type: ARROW Value: ->
Line: 16 Column: 19 Type: double Value: double
Line: 16 Column: 26 Type: L_BRACE Value: {
Line: 17 Column: 4 Type: return Value: return
Line: 17 Column: 11 Type: DOUBLE_LITERAL Value: 3.0
Line: 17 Column: 15 Type: MINUS Value: -
Line: 17 Column: 17 Type: L_PAREN Value: (
Line: 17 Column: 18 Type: IDENT Value: x
Line: 17 Column: 20 Type: MUL Value: *
Line: 17 Column: 22 Type: IDENT Value: x
Line: 17 Column: 23 Type: R_PAREN Value: )
Line: 17 Column: 24 Type: SEMICOLON Value: ;
Line: 18 Column: 0 Type: R_BRACE Value: }
Line: 20 Column: 0 Type: fn Value: fn
Line: 20 Column: 3 Type: IDENT Value: random
Line: 20 Column: 9 Type: L_PAREN Value: (
Line: 20 Column: 10 Type: R_PAREN Value: )
Line: 20 Column: 12 Type: ARROW Value: ->
Line: 20 Column: 15 Type: double Value: double
Line: 20 Column: 22 Type: L_BRACE Value: {
Line: 21 Column: 4 Type: let Value: let
Line: 21 Column: 8 Type: IDENT Value: result
Line: 21 Column: 14 Type: COLON Value: :
Line: 21 Column: 16 Type: int Value: int
Line: 21 Column: 19 Type: SEMICOLON Value: ;
Line: 22 Column: 4 Type: IDENT Value: state
Line: 22 Column: 10 Type: ASSIGN Value: =
Line: 22 Column: 12 Type: IDENT Value: state
Line: 22 Column: 18 Type: PLUS Value: +
Line: 22 Column: 20 Type: IDENT Value: state
Line: 22 Column: 26 Type: MUL Value: *
Line: 22 Column: 28 Type: UNIT_LITERAL Value: 8192
Line: 22 Column: 32 Type: SEMICOLON Value: ;
Line: 23 Column: 4 Type: IDENT Value: state
Line: 23 Column: 10 Type: ASSIGN Value: =
Line: 23 Column: 12 Type: IDENT Value: state
Line: 23 Column: 18 Type: PLUS Value: +
Line: 23 Column: 20 Type: IDENT Value: state
Line: 23 Column: 26 Type: DIV Value: /
Line: 23 Column: 28 Type: UNIT_LITERAL Value: 131072
Line: 23 Column: 34 Type: SEMICOLON Value: ;
Line: 24 Column: 4 Type: IDENT Value: state
Line: 24 Column: 10 Type: ASSIGN Value: =
Line: 24 Column: 12 Type: IDENT Value: state
Line: 24 Column: 18 Type: PLUS Value: +
Line: 24 Column: 20 Type: IDENT Value: state
Line: 24 Column: 26 Type: MUL Value: *
Line: 24 Column: 28 Type: UNIT_LITERAL Value: 32
Line: 24 Column: 30 Type: SEMICOLON Value: ;
Line: 25 Column: 4 Type: IDENT Value: result
Line: 25 Column: 11 Type: ASSIGN Value: =
Line: 25 Column: 13 Type: IDENT Value: state
Line: 25 Column: 19 Type: DIV Value: /
Line: 25 Column: 21 Type: UNIT_LITERAL Value: 65536
Line: 25 Column: 26 Type: SEMICOLON Value: ;
Line: 26 Column: 4 Type: if Value: if
Line: 26 Column: 7 Type: IDENT Value: result
Line: 26 Column: 14 Type: LT Value: <
Line: 26 Column: 16 Type: UNIT_LITERAL Value: 0
Line: 26 Column: 18 Type: L_BRACE Value: {
Line: 27 Column: 8 Type: IDENT Value: result
Line: 27 Column: 15 Type: ASSIGN Value: =
Line: 27 Column: 17 Type: MINUS Value: -
Line: 27 Column: 18 Type: IDENT Value: result
Line: 27 Column: 24 Type: SEMICOLON Value: ;
Line: 28 Column: 4 Type: R_BRACE Value: }
Line: 29 Column: 4 Type: return Value: return
Line: 29 Column: 11 Type: L_PAREN Value: (
Line: 29 Column: 12 Type: IDENT Value: result
Line: 29 Column: 19 Type: as Value: as
Line: 29 Column: 22 Type: double Value: double
Line: 29 Column: 29 Type: DIV Value: /
Line: 29 Column: 31 Type: UNIT_LITERAL Value: 281474976710656
Line: 29 Column: 47 Type: as Value: as
Line: 29 Column: 50 Type: double Value: double
Line: 29 Column: 56 Type: R_PAREN Value: )
Line: 29 Column: 58 Type: SEMICOLON Value: ;
Line: 30 Column: 0 Type: R_BRACE Value: }
Line: 32 Column: 0 Type: fn Value: fn
Line: 32 Column: 3 Type: IDENT Value: approx_exp
Line: 32 Column: 13 Type: L_PAREN Value: (
Line: 32 Column: 14 Type: IDENT Value: x
Line: 32 Column: 15 Type: COLON Value: :
Line: 32 Column: 17 Type: double Value: double
Line: 32 Column: 23 Type: R_PAREN Value: )
Line: 32 Column: 25 Type: ARROW Value: ->
Line: 32 Column: 28 Type: double Value: double
Line: 32 Column: 35 Type: L_BRACE Value: {
Line: 33 Column: 4 Type: let Value: let
Line: 33 Column: 8 Type: IDENT Value: temp
Line: 33 Column: 12 Type: COLON Value: :
Line: 33 Column: 14 Type: double Value: double
Line: 33 Column: 20 Type: SEMICOLON Value: ;
Line: 34 Column: 4 Type: if Value: if
Line: 34 Column: 7 Type: IDENT Value: x
Line: 34 Column: 9 Type: GT Value: >
Line: 34 Column: 11 Type: DOUBLE_LITERAL Value: 0.1
Line: 34 Column: 15 Type: L_BRACE Value: {
Line: 35 Column: 8 Type: IDENT Value: temp
Line: 35 Column: 13 Type: ASSIGN Value: =
Line: 35 Column: 15 Type: IDENT Value: approx_exp
Line: 35 Column: 25 Type: L_PAREN Value: (
Line: 35 Column: 26 Type: IDENT Value: x
Line: 35 Column: 28 Type: DIV Value: /
Line: 35 Column: 30 Type: DOUBLE_LITERAL Value: 2.0
Line: 35 Column: 33 Type: R_PAREN Value: )
Line: 35 Column: 34 Type: SEMICOLON Value: ;
Line: 36 Column: 8 Type: return Value: return
Line: 36 Column: 15 Type: IDENT Value: x
Line: 36 Column: 17 Type: MUL Value: *
Line: 36 Column: 19 Type: IDENT Value: x
Line: 36 Column: 20 Type: SEMICOLON Value: ;
Line: 37 Column: 4 Type: R_BRACE Value: }
Line: 37 Column: 6 Type: else Value: else
Line: 37 Column: 11 Type: if Value: if
Line: 37 Column: 14 Type: IDENT Value: x
Line: 37 Column: 16 Type: LT Value: <
Line: 37 Column: 18 Type: MINUS Value: -
Line: 37 Column: 19 Type: DOUBLE_LITERAL Value: 0.1
Line: 37 Column: 23 Type: L_BRACE Value: {
Line: 38 Column: 8 Type: IDENT Value: temp
Line: 38 Column: 13 Type: ASSIGN Value: =
Line: 38 Column: 15 Type: IDENT Value: approx_exp
Line: 38 Column: 25 Type: L_PAREN Value: (
Line: 38 Column: 26 Type: IDENT Value: x
Line: 38 Column: 28 Type: DIV Value: /
Line: 38 Column: 30 Type: DOUBLE_LITERAL Value: 2.0
Line: 38 Column: 33 Type: R_PAREN Value: )
Line: 38 Column: 34 Type: SEMICOLON Value: ;
Line: 39 Column: 8 Type: return Value: return
Line: 39 Column: 15 Type: IDENT Value: x
Line: 39 Column: 17 Type: MUL Value: *
Line: 39 Column: 19 Type: IDENT Value: x
Line: 39 Column: 20 Type: SEMICOLON Value: ;
Line: 40 Column: 4 Type: R_BRACE Value: }
Line: 40 Column: 6 Type: else Value: else
Line: 40 Column: 11 Type: L_BRACE Value: {
Line: 41 Column: 8 Type: return Value: return
Line: 41 Column: 15 Type: L_PAREN Value: (
Line: 41 Column: 16 Type: L_PAREN Value: (
Line: 41 Column: 17 Type: IDENT Value: x
Line: 41 Column: 19 Type: PLUS Value: +
Line: 41 Column: 21 Type: DOUBLE_LITERAL Value: 3.0
Line: 41 Column: 24 Type: R_PAREN Value: )
Line: 41 Column: 26 Type: MUL Value: *
Line: 41 Column: 28 Type: L_PAREN Value: (
Line: 41 Column: 29 Type: IDENT Value: x
Line: 41 Column: 31 Type: PLUS Value: +
Line: 41 Column: 33 Type: DOUBLE_LITERAL Value: 3.0
Line: 41 Column: 36 Type: R_PAREN Value: )
Line: 41 Column: 38 Type: PLUS Value: +
Line: 41 Column: 40 Type: DOUBLE_LITERAL Value: 3.0
Line: 41 Column: 43 Type: R_PAREN Value: )
Line: 41 Column: 45 Type: DIV Value: /
Line: 41 Column: 47 Type: L_PAREN Value: (
Line: 41 Column: 48 Type: L_PAREN Value: (
Line: 41 Column: 49 Type: IDENT Value: x
Line: 41 Column: 51 Type: MINUS Value: -
Line: 41 Column: 53 Type: DOUBLE_LITERAL Value: 3.0
Line: 41 Column: 56 Type: R_PAREN Value: )
Line: 41 Column: 58 Type: MUL Value: *
Line: 41 Column: 60 Type: L_PAREN Value: (
Line: 41 Column: 61 Type: IDENT Value: x
Line: 41 Column: 63 Type: MINUS Value: -
Line: 41 Column: 65 Type: DOUBLE_LITERAL Value: 3.0
Line: 41 Column: 68 Type: R_PAREN Value: )
Line: 41 Column: 70 Type: PLUS Value: +
Line: 41 Column: 72 Type: DOUBLE_LITERAL Value: 3.0
Line: 41 Column: 75 Type: R_PAREN Value: )
Line: 41 Column: 76 Type: SEMICOLON Value: ;
Line: 42 Column: 4 Type: R_BRACE Value: }
Line: 43 Column: 0 Type: R_BRACE Value: }
Line: 45 Column: 0 Type: fn Value: fn
Line: 45 Column: 3 Type: IDENT Value: judge
Line: 45 Column: 8 Type: L_PAREN Value: (
Line: 45 Column: 9 Type: IDENT Value: delta
Line: 45 Column: 14 Type: COLON Value: :
Line: 45 Column: 16 Type: double Value: double
Line: 45 Column: 22 Type: COMMA Value: ,
Line: 45 Column: 24 Type: IDENT Value: temp
Line: 45 Column: 28 Type: COLON Value: :
Line: 45 Column: 30 Type: double Value: double
Line: 45 Column: 36 Type: R_PAREN Value: )
Line: 45 Column: 38 Type: ARROW Value: ->
Line: 45 Column: 41 Type: int Value: int
Line: 45 Column: 45 Type: L_BRACE Value: {
Line: 46 Column: 4 Type: if Value: if
Line: 46 Column: 7 Type: IDENT Value: delta
Line: 46 Column: 13 Type: LT Value: <
Line: 46 Column: 15 Type: DOUBLE_LITERAL Value: 0.0
Line: 46 Column: 19 Type: L_BRACE Value: {
Line: 47 Column: 8 Type: return Value: return
Line: 47 Column: 15 Type: UNIT_LITERAL Value: 1
Line: 47 Column: 16 Type: SEMICOLON Value: ;
Line: 48 Column: 4 Type: R_BRACE Value: }
Line: 48 Column: 6 Type: else Value: else
Line: 48 Column: 11 Type: L_BRACE Value: {
Line: 49 Column: 8 Type: if Value: if
Line: 49 Column: 11 Type: IDENT Value: approx_exp
Line: 49 Column: 21 Type: L_PAREN Value: (
Line: 49 Column: 22 Type: MINUS Value: -
Line: 49 Column: 23 Type: IDENT Value: delta
Line: 49 Column: 29 Type: DIV Value: /
Line: 49 Column: 31 Type: IDENT Value: temp
Line: 49 Column: 36 Type: DIV Value: /
Line: 49 Column: 38 Type: DOUBLE_LITERAL Value: 16.0
Line: 49 Column: 42 Type: R_PAREN Value: )
Line: 49 Column: 44 Type: GT Value: >
Line: 49 Column: 46 Type: IDENT Value: random
Line: 49 Column: 52 Type: L_PAREN Value: (
Line: 49 Column: 53 Type: R_PAREN Value: )
Line: 49 Column: 55 Type: L_BRACE Value: {
Line: 50 Column: 12 Type: return Value: return
Line: 50 Column: 19 Type: UNIT_LITERAL Value: 1
Line: 50 Column: 20 Type: SEMICOLON Value: ;
Line: 51 Column: 8 Type: R_BRACE Value: }
Line: 51 Column: 10 Type: else Value: else
Line: 51 Column: 15 Type: L_BRACE Value: {
Line: 52 Column: 12 Type: return Value: return
Line: 52 Column: 19 Type: UNIT_LITERAL Value: 0
Line: 52 Column: 20 Type: SEMICOLON Value: ;
Line: 53 Column: 8 Type: R_BRACE Value: }
Line: 54 Column: 4 Type: R_BRACE Value: }
Line: 55 Column: 0 Type: R_BRACE Value: }
Line: 57 Column: 0 Type: fn Value: fn
Line: 57 Column: 3 Type: IDENT Value: run_anneal
Line: 57 Column: 13 Type: L_PAREN Value: (
Line: 57 Column: 14 Type: R_PAREN Value: )
Line: 57 Column: 16 Type: ARROW Value: ->
Line: 57 Column: 19 Type: double Value: double
Line: 57 Column: 26 Type: L_BRACE Value: {
Line: 58 Column: 4 Type: let Value: let
Line: 58 Column: 8 Type: IDENT Value: delta
Line: 58 Column: 13 Type: COLON Value: :
Line: 58 Column: 15 Type: double Value: double
Line: 58 Column: 21 Type: SEMICOLON Value: ;
Line: 59 Column: 4 Type: let Value: let
Line: 59 Column: 8 Type: IDENT Value: delta_s
Line: 59 Column: 15 Type: COLON Value: :
Line: 59 Column: 17 Type: double Value: double
Line: 59 Column: 23 Type: SEMICOLON Value: ;
Line: 60 Column: 4 Type: let Value: let
Line: 60 Column: 8 Type: IDENT Value: round
Line: 60 Column: 13 Type: COLON Value: :
Line: 60 Column: 15 Type: int Value: int
Line: 60 Column: 19 Type: ASSIGN Value: =
Line: 60 Column: 21 Type: UNIT_LITERAL Value: 0
Line: 60 Column: 22 Type: SEMICOLON Value: ;
Line: 61 Column: 4 Type: IDENT Value: x_old
Line: 61 Column: 10 Type: ASSIGN Value: =
Line: 61 Column: 12 Type: IDENT Value: random
Line: 61 Column: 18 Type: L_PAREN Value: (
Line: 61 Column: 19 Type: R_PAREN Value: )
Line: 61 Column: 21 Type: MUL Value: *
Line: 61 Column: 23 Type: L_PAREN Value: (
Line: 61 Column: 24 Type: IDENT Value: f_high
Line: 61 Column: 31 Type: MINUS Value: -
Line: 61 Column: 33 Type: IDENT Value: f_low
Line: 61 Column: 38 Type: R_PAREN Value: )
Line: 61 Column: 40 Type: PLUS Value: +
Line: 61 Column: 42 Type: IDENT Value: f_low
Line: 61 Column: 47 Type: SEMICOLON Value: ;
Line: 62 Column: 4 Type: IDENT Value: x_new
Line: 62 Column: 10 Type: ASSIGN Value: =
Line: 62 Column: 12 Type: IDENT Value: x_old
Line: 62 Column: 17 Type: SEMICOLON Value: ;
Line: 63 Column: 4 Type: IDENT Value: s_old
Line: 63 Column: 10 Type: ASSIGN Value: =
Line: 63 Column: 12 Type: IDENT Value: f
Line: 63 Column: 13 Type: L_PAREN Value: (
Line: 63 Column: 14 Type: IDENT Value: x_old
Line: 63 Column: 19 Type: R_PAREN Value: )
Line: 63 Column: 20 Type: SEMICOLON Value: ;
Line: 64 Column: 4 Type: IDENT Value: s_new
Line: 64 Column: 10 Type: ASSIGN Value: =
Line: 64 Column: 12 Type: IDENT Value: s_old
Line: 64 Column: 17 Type: SEMICOLON Value: ;
Line: 65 Column: 4 Type: while Value: while
Line: 65 Column: 10 Type: IDENT Value: temp
Line: 65 Column: 15 Type: GT Value: >
Line: 65 Column: 17 Type: DOUBLE_LITERAL Value: 0.0010000000000000002
Line: 65 Column: 23 Type: L_BRACE Value: {
Line: 66 Column: 8 Type: IDENT Value: delta
Line: 66 Column: 14 Type: ASSIGN Value: =
Line: 66 Column: 16 Type: L_PAREN Value: (
Line: 66 Column: 17 Type: IDENT Value: random
Line: 66 Column: 23 Type: L_PAREN Value: (
Line: 66 Column: 24 Type: R_PAREN Value: )
Line: 66 Column: 26 Type: MINUS Value: -
Line: 66 Column: 28 Type: DOUBLE_LITERAL Value: 0.5
Line: 66 Column: 31 Type: R_PAREN Value: )
Line: 66 Column: 33 Type: MUL Value: *
Line: 66 Column: 35 Type: DOUBLE_LITERAL Value: 4.0
Line: 66 Column: 38 Type: SEMICOLON Value: ;
Line: 67 Column: 8 Type: IDENT Value: x_new
Line: 67 Column: 14 Type: ASSIGN Value: =
Line: 67 Column: 16 Type: IDENT Value: x_old
Line: 67 Column: 22 Type: PLUS Value: +
Line: 67 Column: 24 Type: IDENT Value: delta
Line: 67 Column: 29 Type: SEMICOLON Value: ;
Line: 68 Column: 8 Type: if Value: if
Line: 68 Column: 11 Type: IDENT Value: x_new
Line: 68 Column: 17 Type: GT Value: >
Line: 68 Column: 19 Type: IDENT Value: f_high
Line: 68 Column: 26 Type: L_BRACE Value: {
Line: 69 Column: 12 Type: IDENT Value: x_new
Line: 69 Column: 18 Type: ASSIGN Value: =
Line: 69 Column: 20 Type: IDENT Value: x_new
Line: 69 Column: 26 Type: MINUS Value: -
Line: 69 Column: 28 Type: DOUBLE_LITERAL Value: 2.0
Line: 69 Column: 32 Type: MUL Value: *
Line: 69 Column: 34 Type: IDENT Value: delta
Line: 69 Column: 39 Type: SEMICOLON Value: ;
Line: 70 Column: 8 Type: R_BRACE Value: }
Line: 70 Column: 10 Type: else Value: else
Line: 70 Column: 15 Type: if Value: if
Line: 70 Column: 18 Type: IDENT Value: x_new
Line: 70 Column: 24 Type: LT Value: <
Line: 70 Column: 26 Type: IDENT Value: f_low
Line: 70 Column: 32 Type: L_BRACE Value: {
Line: 71 Column: 12 Type: IDENT Value: x_new
Line: 71 Column: 18 Type: ASSIGN Value: =
Line: 71 Column: 20 Type: IDENT Value: x_new
Line: 71 Column: 26 Type: MINUS Value: -
Line: 71 Column: 28 Type: DOUBLE_LITERAL Value: 2.0
Line: 71 Column: 32 Type: MUL Value: *
Line: 71 Column: 34 Type: IDENT Value: delta
Line: 71 Column: 39 Type: SEMICOLON Value: ;
Line: 72 Column: 8 Type: R_BRACE Value: }
Line: 74 Column: 8 Type: IDENT Value: s_new
Line: 74 Column: 14 Type: ASSIGN Value: =
Line: 74 Column: 16 Type: IDENT Value: f
Line: 74 Column: 17 Type: L_PAREN Value: (
Line: 74 Column: 18 Type: IDENT Value: x_new
Line: 74 Column: 23 Type: R_PAREN Value: )
Line: 74 Column: 24 Type: SEMICOLON Value: ;
Line: 76 Column: 8 Type: IDENT Value: delta_s
Line: 76 Column: 16 Type: ASSIGN Value: =
Line: 76 Column: 18 Type: IDENT Value: s_old
Line: 76 Column: 24 Type: MINUS Value: -
Line: 76 Column: 26 Type: IDENT Value: s_new
Line: 76 Column: 31 Type: SEMICOLON Value: ;
Line: 78 Column: 8 Type: if Value: if
Line: 78 Column: 11 Type: IDENT Value: judge
Line: 78 Column: 16 Type: L_PAREN Value: (
Line: 78 Column: 17 Type: IDENT Value: delta_s
Line: 78 Column: 24 Type: COMMA Value: ,
Line: 78 Column: 26 Type: IDENT Value: temp
Line: 78 Column: 30 Type: R_PAREN Value: )
Line: 78 Column: 32 Type: L_BRACE Value: {
Line: 79 Column: 12 Type: IDENT Value: s_old
Line: 79 Column: 18 Type: ASSIGN Value: =
Line: 79 Column: 20 Type: IDENT Value: s_new
Line: 79 Column: 25 Type: SEMICOLON Value: ;
Line: 80 Column: 12 Type: IDENT Value: x_old
Line: 80 Column: 18 Type: ASSIGN Value: =
Line: 80 Column: 20 Type: IDENT Value: x_new
Line: 80 Column: 25 Type: SEMICOLON Value: ;
Line: 81 Column: 8 Type: R_BRACE Value: }
Line: 83 Column: 8 Type: if Value: if
Line: 83 Column: 11 Type: IDENT Value: delta_s
Line: 83 Column: 19 Type: LT Value: <
Line: 83 Column: 21 Type: DOUBLE_LITERAL Value: 0.0
Line: 83 Column: 25 Type: L_BRACE Value: {
Line: 84 Column: 12 Type: IDENT Value: temp
Line: 84 Column: 17 Type: ASSIGN Value: =
Line: 84 Column: 19 Type: IDENT Value: temp
Line: 84 Column: 24 Type: MUL Value: *
Line: 84 Column: 26 Type: DOUBLE_LITERAL Value: 0.98
Line: 84 Column: 30 Type: SEMICOLON Value: ;
Line: 86 Column: 12 Type: IDENT Value: putstr
Line: 86 Column: 18 Type: L_PAREN Value: (
Line: 86 Column: 19 Type: STRING_LITERAL Value: round=
Line: 86 Column: 27 Type: R_PAREN Value: )
Line: 86 Column: 28 Type: SEMICOLON Value: ;
Line: 87 Column: 12 Type: IDENT Value: putint
Line: 87 Column: 18 Type: L_PAREN Value: (
Line: 87 Column: 19 Type: IDENT Value: round
Line: 87 Column: 24 Type: R_PAREN Value: )
Line: 87 Column: 25 Type: SEMICOLON Value: ;
Line: 88 Column: 12 Type: IDENT Value: putstr
Line: 88 Column: 18 Type: L_PAREN Value: (
Line: 88 Column: 19 Type: STRING_LITERAL Value:  temp=
Line: 88 Column: 27 Type: R_PAREN Value: )
Line: 88 Column: 28 Type: SEMICOLON Value: ;
Line: 89 Column: 12 Type: IDENT Value: putdouble
Line: 89 Column: 21 Type: L_PAREN Value: (
Line: 89 Column: 22 Type: IDENT Value: temp
Line: 89 Column: 26 Type: R_PAREN Value: )
Line: 89 Column: 27 Type: SEMICOLON Value: ;
Line: 90 Column: 12 Type: IDENT Value: putstr
Line: 90 Column: 18 Type: L_PAREN Value: (
Line: 90 Column: 19 Type: STRING_LITERAL Value:  value=
Line: 90 Column: 28 Type: R_PAREN Value: )
Line: 90 Column: 29 Type: SEMICOLON Value: ;
Line: 91 Column: 12 Type: IDENT Value: putdouble
Line: 91 Column: 21 Type: L_PAREN Value: (
Line: 91 Column: 22 Type: IDENT Value: s_old
Line: 91 Column: 27 Type: R_PAREN Value: )
Line: 91 Column: 28 Type: SEMICOLON Value: ;
Line: 92 Column: 12 Type: IDENT Value: putln
Line: 92 Column: 17 Type: L_PAREN Value: (
Line: 92 Column: 18 Type: R_PAREN Value: )
Line: 92 Column: 19 Type: SEMICOLON Value: ;
Line: 93 Column: 8 Type: R_BRACE Value: }
Line: 94 Column: 8 Type: IDENT Value: round
Line: 94 Column: 14 Type: ASSIGN Value: =
Line: 94 Column: 16 Type: IDENT Value: round
Line: 94 Column: 22 Type: PLUS Value: +
Line: 94 Column: 24 Type: UNIT_LITERAL Value: 1
Line: 94 Column: 25 Type: SEMICOLON Value: ;
Line: 95 Column: 4 Type: R_BRACE Value: }
Line: 96 Column: 4 Type: return Value: return
Line: 96 Column: 11 Type: IDENT Value: s_old
Line: 96 Column: 16 Type: SEMICOLON Value: ;
Line: 97 Column: 0 Type: R_BRACE Value: }
Line: 99 Column: 0 Type: fn Value: fn
Line: 99 Column: 3 Type: IDENT Value: main
Line: 99 Column: 7 Type: L_PAREN Value: (
Line: 99 Column: 8 Type: R_PAREN Value: )
Line: 99 Column: 10 Type: ARROW Value: ->
Line: 99 Column: 13 Type: void Value: void
Line: 99 Column: 18 Type: L_BRACE Value: {
Line: 100 Column: 4 Type: IDENT Value: putdouble
Line: 100 Column: 13 Type: L_PAREN Value: (
Line: 100 Column: 14 Type: IDENT Value: run_anneal
Line: 100 Column: 24 Type: L_PAREN Value: (
Line: 100 Column: 25 Type: R_PAREN Value: )
Line: 100 Column: 26 Type: R_PAREN Value: )
Line: 100 Column: 27 Type: SEMICOLON Value: ;
Line: 101 Column: 0 Type: R_BRACE Value: }